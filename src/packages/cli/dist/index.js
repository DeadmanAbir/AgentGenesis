#!/usr/bin/env node
var $=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(u,m)=>(typeof require<"u"?require:u)[m]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+t+'" is not supported')});import{Command as x}from"commander";import f from"chalk";import S from"figlet";import w from"inquirer";import n from"fs";import s from"path";import k from"ora";import{execSync as A}from"child_process";import{fileURLToPath as j}from"url";import{dirname as C}from"path";var F=j(import.meta.url),I=C(F);console.log(f.yellow(S.textSync("AgentGenesis",{horizontalLayout:"full"})));var g=new x;g.version("1.0.0").description("My Node CLI");g.command("add <component>").description("Add a specified component inside the utils/agentgenesis folder").action(async t=>{let u=[{type:"input",name:"rootPath",message:"What is the root path of your project?",default:process.cwd(),validate:e=>n.existsSync(e)?!0:"The path you entered does not exist. Please enter a valid path."}],p=(await w.prompt(u)).rootPath,i=e=>{try{return $.resolve(s.join(p,"node_modules",e)),!0}catch{return!1}},a=async(e,d,v)=>{let{[`install${d}`]:b}=await w.prompt([{type:"confirm",name:`install${d}`,message:`'${d}' requires '${e}'. Would you like to install it now?`,default:!0}]);if(b){let y=k(`Installing ${e}...`).start();try{return A(v,{stdio:"inherit",cwd:p}),y.succeed(`Successfully installed ${e}.`),!0}catch(P){return y.fail(`Failed to install ${e}: ${P.message}`),!1}}else return console.log(f.red(`'${d}' cannot be added without '${e}'. Please install it and try again.`)),!1};switch(t){case"calculatortool":if(!i("expr-eval")&&!await a("expr-eval","expr-eval","npm install expr-eval"))return;break;case"chatOpenAI":case"openAIEmbeddings":if(!i("openai")&&!await a("openai","openai","npm install openai"))return;break;case"chatAnthropic":if(!i("@anthropic-ai/sdk")&&!await a("@anthropic-ai/sdk","@anthropic-ai/sdk","npm install @anthropic-ai/sdk"))return;break;case"chatGemini":case"geminiEmbeddings":if(!i("@google/generative-ai")&&!await a("@google/generative-ai","@google/generative-ai","npm install @google/generative-ai"))return;break;case"reranker":if(!i("cohere-ai")&&!await a("cohere-ai","reranker","npm install -s cohere-ai"))return;break;case"unstructuredLoader":if(!i("unstructured-client")&&!await a("unstructured-client","unstructured-client","npm install unstructured-client --include=dev"))return;break;default:console.log(f.red(`Unknown component '${t}'. Please choose a valid component.`));return}let o=s.join(p,"utils"),l=s.join(o,"agentgenesis"),c=s.join(l,`${t}.ts`),h=s.join(I,"components",`${t}.ts`),r=k(`Adding ${t} to your project...`).start();try{if(!n.existsSync(h)){r.fail(`Template for '${t}' not found.`);return}n.existsSync(o)||(n.mkdirSync(o),r.succeed(`Created 'utils' folder at ${o}.`)),n.existsSync(l)||(n.mkdirSync(l),r.succeed(`Created 'agentgenesis' folder at ${l}.`));let e=n.readFileSync(h,"utf-8");n.existsSync(c)?r.warn(`'${t}.ts' already exists at ${c}.`):(n.writeFileSync(c,e),r.succeed(`Created '${t}.ts' at ${c}.`))}catch(e){r.fail(`Failed to add ${t}: ${e.message}`)}});g.parse(process.argv);
//# sourceMappingURL=index.js.map