{"version":3,"sources":["../src/index.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { Command } from 'commander';\nimport chalk from 'chalk';\nimport figlet from 'figlet';\nimport inquirer from 'inquirer';\nimport fs from 'fs';\nimport path from 'path';\nimport ora from 'ora';\nimport { execSync } from 'child_process';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\n// Define the types for prompts\ninterface PromptAnswers {\n  rootPath?: string;\n  installexpreval?: boolean;\n  installopenai?: boolean;\n  installgeminiai?: boolean;\n}\n\n// Get __dirname and __filename equivalents in ESM\nconst __filename: string = fileURLToPath(import.meta.url);\nconst __dirname: string = dirname(__filename);\n\n// Display the banner\nconsole.log(\n  chalk.yellow(figlet.textSync('AgentGenesis', { horizontalLayout: 'full' })),\n);\n\n// Initialize Commander\nconst program = new Command();\n\nprogram.version('1.0.0').description('My Node CLI');\n\n// Define the 'add' command\nprogram\n  .command('add <component>')\n  .description('Add a specified component inside the utils/agentgenesis folder')\n  .action(async (component: string) => {\n    // Prompt for rootPath\n    const questions = [\n      {\n        type: 'input',\n        name: 'rootPath',\n        message: 'What is the root path of your project?',\n        default: process.cwd(),\n        validate: (input: string) => {\n          if (fs.existsSync(input)) {\n            return true;\n          }\n          return 'The path you entered does not exist. Please enter a valid path.';\n        },\n      },\n    ];\n    //@ts-ignore\n    const answers: PromptAnswers = await inquirer.prompt(questions);\n    const rootPath: string = answers.rootPath as string;\n\n    // Function to check if a module is installed\n    const isModuleInstalled = (moduleName: string): boolean => {\n      try {\n        require.resolve(path.join(rootPath, 'node_modules', moduleName));\n        return true;\n      } catch {\n        return false;\n      }\n    };\n\n    // Function to prompt installation of a module\n    const promptInstallModule = async (\n      moduleName: string,\n      displayName: string,\n      installCommand: string,\n    ): Promise<boolean> => {\n      const { [`install${displayName}`]: install } = await inquirer.prompt([\n        {\n          type: 'confirm',\n          name: `install${displayName}`,\n          message: `'${displayName}' requires '${moduleName}'. Would you like to install it now?`,\n          default: true,\n        },\n      ]);\n\n      if (install) {\n        const spinner = ora(`Installing ${moduleName}...`).start();\n        try {\n          execSync(installCommand, {\n            stdio: 'inherit',\n            cwd: rootPath,\n          });\n          spinner.succeed(`Successfully installed ${moduleName}.`);\n          return true;\n        } catch (error: any) {\n          spinner.fail(`Failed to install ${moduleName}: ${error.message}`);\n          return false;\n        }\n      } else {\n        console.log(\n          chalk.red(\n            `'${displayName}' cannot be added without '${moduleName}'. Please install it and try again.`,\n          ),\n        );\n        return false;\n      }\n    };\n    const ensureAgentGenesisFaisal = async (): Promise<boolean> => {\n      const moduleName = 'agentgenesisfaisal';\n      if (!isModuleInstalled(moduleName)) {\n        const { installAgentgenesisfaisal } = await inquirer.prompt([\n          {\n            type: 'confirm',\n            name: 'installAgentgenesisfaisal',\n            message: `'${moduleName}' is not installed. Would you like to install it now?`,\n            default: true,\n          },\n        ]);\n\n        if (installAgentgenesisfaisal) {\n          const spinner = ora(`Installing ${moduleName}...`).start();\n          try {\n            execSync(`npm install ${moduleName}`, {\n              stdio: 'inherit',\n              cwd: rootPath,\n            });\n            spinner.succeed(`Successfully installed ${moduleName}.`);\n            return true;\n          } catch (error: any) {\n            spinner.fail(`Failed to install ${moduleName}: ${error.message}`);\n            return false;\n          }\n        } else {\n          console.log(\n            chalk.red(\n              `Cannot proceed without '${moduleName}'. Please install it and try again.`,\n            ),\n          );\n          return false;\n        }\n      }\n      return true;\n    };\n    const agentGenesisInstalled = await ensureAgentGenesisFaisal();\n    if (!agentGenesisInstalled) {\n      return;\n    }\n\n    // Handle each component's dependencies\n    switch (component) {\n      case 'calculatortool':\n        if (!isModuleInstalled('expr-eval')) {\n          const installed = await promptInstallModule(\n            'expr-eval',\n            'expr-eval',\n            'npm install expr-eval',\n          );\n          if (!installed) return;\n        }\n        break;\n\n      case 'chatOpenAI':\n      case 'openAIEmbeddings':\n        if (!isModuleInstalled('openai')) {\n          const installed = await promptInstallModule(\n            'openai',\n            'openai',\n            'npm install openai',\n          );\n          if (!installed) return;\n        }\n        break;\n\n      case 'chatAnthropic':\n        if (!isModuleInstalled('@anthropic-ai/sdk')) {\n          const installed = await promptInstallModule(\n            '@anthropic-ai/sdk',\n            '@anthropic-ai/sdk',\n            'npm install @anthropic-ai/sdk',\n          );\n          if (!installed) return;\n        }\n        break;\n\n      case 'chatGemini':\n      case 'geminiEmbeddings':\n        if (!isModuleInstalled('@google/generative-ai')) {\n          const installed = await promptInstallModule(\n            '@google/generative-ai',\n            '@google/generative-ai',\n            'npm install @google/generative-ai',\n          );\n          if (!installed) return;\n        }\n        break;\n\n      case 'reranker':\n        if (!isModuleInstalled('cohere-ai')) {\n          const installed = await promptInstallModule(\n            'cohere-ai',\n            'reranker',\n            'npm install -s cohere-ai',\n          );\n          if (!installed) return;\n        }\n        break;\n\n      case 'unstructuredLoader':\n        if (!isModuleInstalled('unstructured-client')) {\n          const installed = await promptInstallModule(\n            'unstructured-client',\n            'unstructured-client',\n            'npm install unstructured-client --include=dev',\n          );\n          if (!installed) return;\n        }\n        break;\n\n      default:\n        console.log(\n          chalk.red(\n            `Unknown component '${component}'. Please choose a valid component.`,\n          ),\n        );\n        return;\n    }\n\n    // Paths for utils and agentgenesis directories\n    const utilsPath: string = path.join(rootPath, 'utils');\n    const agentGenesisPath: string = path.join(utilsPath, 'agentgenesis');\n    const componentFilePath: string = path.join(\n      agentGenesisPath,\n      `${component}.ts`,\n    );\n    const templateFilePath: string = path.join(\n      __dirname,\n      'components',\n      `${component}.ts`,\n    );\n\n    const spinner = ora(`Adding ${component} to your project...`).start();\n\n    try {\n      if (!fs.existsSync(templateFilePath)) {\n        spinner.fail(`Template for '${component}' not found.`);\n        return;\n      }\n\n      // Create 'utils' directory if it doesn't exist\n      if (!fs.existsSync(utilsPath)) {\n        fs.mkdirSync(utilsPath);\n        spinner.succeed(`Created 'utils' folder at ${utilsPath}.`);\n      }\n\n      // Create 'agentgenesis' directory if it doesn't exist\n      if (!fs.existsSync(agentGenesisPath)) {\n        fs.mkdirSync(agentGenesisPath);\n        spinner.succeed(\n          `Created 'agentgenesis' folder at ${agentGenesisPath}.`,\n        );\n      }\n\n      const templateContent: string = fs.readFileSync(\n        templateFilePath,\n        'utf-8',\n      );\n\n      if (!fs.existsSync(componentFilePath)) {\n        fs.writeFileSync(componentFilePath, templateContent);\n        spinner.succeed(`Created '${component}.ts' at ${componentFilePath}.`);\n      } else {\n        spinner.warn(\n          `'${component}.ts' already exists at ${componentFilePath}.`,\n        );\n      }\n    } catch (error: any) {\n      spinner.fail(`Failed to add ${component}: ${error.message}`);\n    }\n  });\n\nprogram.parse(process.argv);\n"],"mappings":"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","names":["Command","chalk","figlet","inquirer","fs","path","ora","execSync","fileURLToPath","dirname","__filename","fileURLToPath","__dirname","dirname","chalk","figlet","program","Command","component","questions","input","fs","rootPath","inquirer","isModuleInstalled","moduleName","__require","path","promptInstallModule","displayName","installCommand","install","spinner","ora","execSync","error","installAgentgenesisfaisal","utilsPath","agentGenesisPath","componentFilePath","templateFilePath","templateContent"]}